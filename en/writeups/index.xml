<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writeups on Think
Love
Share</title>
    <link>https://thinkloveshare.github.io/en/writeups/</link>
    <description>Recent content in Writeups on Think
Love
Share</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 16 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://thinkloveshare.github.io/en/writeups/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSAW - Algebra</title>
      <link>https://thinkloveshare.github.io/en/writeups/csaw_2018/algebra/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thinkloveshare.github.io/en/writeups/csaw_2018/algebra/</guid>
      <description>Description  Are you a real math wiz?
nc misc.chal.csaw.io 9002
 TL;DR This challenge consists in equations being thrown at us that we have to solve and send the result in order to get the flag. Python and sage, I invoke you !
Methology A friend I was talking with while solving this chall told me :
 Well, the equations are simple, let&amp;rsquo;s write a quick script to solve it !</description>
    </item>
    
    <item>
      <title>CSAW - Big boi</title>
      <link>https://thinkloveshare.github.io/en/writeups/csaw_2018/big_boi/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thinkloveshare.github.io/en/writeups/csaw_2018/big_boi/</guid>
      <description>Description  Only big boi pwners will get this one!
nc pwn.chal.csaw.io 9000
 You can download the ELF here
TL;DR This challenge is a simple buffer overflow with a check that may lead to code execution. It&amp;rsquo;s an easy pwn, so one liner is the way to go !
Methology Step 1 : Use IDA to decompile the program and avoid losing time, then overflow it with the good value many time to access the &amp;ldquo;/bin/bash&amp;rdquo; statement.</description>
    </item>
    
    <item>
      <title>CSAW - Shell-&gt;Code</title>
      <link>https://thinkloveshare.github.io/en/writeups/csaw_2018/shell_code/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thinkloveshare.github.io/en/writeups/csaw_2018/shell_code/</guid>
      <description>Description  Linked lists are great! They let you chain pieces of data together.
nc pwn.chal.csaw.io 9005
 You can download the ELF file : here
TL;DR This challenge uses linked list and leaks an address, the stack is executable, a short shellcode and a relative jump will do the trick !
Methology Step 1 : Use IDA to decompile the program, find the two useful functions that fills the linked list and expose the buffer overflow.</description>
    </item>
    
    <item>
      <title>CSAW - Short Circuit</title>
      <link>https://thinkloveshare.github.io/en/writeups/csaw_2018/short_circuit/</link>
      <pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thinkloveshare.github.io/en/writeups/csaw_2018/short_circuit/</guid>
      <description>Description  Start from the monkey&amp;rsquo;s paw and work your way down the high voltage line, for every wire that is branches off has an element that is either on or off. Ignore the first bit. Standard flag format.
-Elyk
 TL;DR This challenge consists in the analysis of a lovely electronic scheme.
It is composed of diodes, wires, wires, wires and wires.
The goal is to extract bits of data from the circuit.</description>
    </item>
    
    <item>
      <title>Security Fest - Excess ess 1</title>
      <link>https://thinkloveshare.github.io/en/writeups/security_fest_2018/excess_ess_1/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://thinkloveshare.github.io/en/writeups/security_fest_2018/excess_ess_1/</guid>
      <description>This challenge is called &amp;ldquo;Excess Ess 1&amp;rdquo;, a funny name for XSS, which is an attack that consists in forcing our victim&amp;rsquo;s browser to execute code (most of the time javascript) without its consent. This challenge was proposed by the 2018&amp;rsquo;s edition of the SecurityFest CTF.
The goal Most of the time, to prove that an XSS is possible, the hacker provides a payload that pops an alert. And that&amp;rsquo;s exactly what we&amp;rsquo;re asked to do.</description>
    </item>
    
  </channel>
</rss>